Project 5 - Monster's Game
Group 1
30 April 2015

MVC vs. MVA:
For the model view we used states that drew the canvas and then have listeners and other functions constantly checking and updating the state/canvas.

Use of the SOLID and other design principles:
For this project we made use of multiple object-oriented design principles. We decided to make heavy use of the visitor principle because it made it easiest to draw all of the objects onto the canvas when we needed them to be drawn. Each of the shapes and drawable objects are outfitted with the visitor design principle. Within the SOLID principles we made use of the interface segregation because it made it easiest to implement the different states as well as each of the different elements that comprise each of the states while they are running. For running the entire game, switching views, as well as running tasks, we decided to do everything using the state design principle. The progression of our menus/game is a progression of states that switch and redraw the canvas to preform their designed purpose. We also used the observer/event design principle to control all of the touch events from the user as well as for the changing of states. The states we created generally change based on input from the user so we needed to make use of event controlling.


Impact on Testability:
With each piece of the project that we needed to build out, we decide to separate them as much as possible in order to aid creating tests and making them useful. Each of our classes, interfaces, and objects are testable individually as well as the elements of game logic. The majority of them are able to be tested fairly simply because of the way that we abstract everything out instead of loading it all into one piece.


Concurrency:
We needed three separate threads to handle our project. There is one for tracking touches, that was there since the dot view skeleton. Then we added another for tracking time, it tracks changed to system time and updates the dotview accordingly. Finally theres the main thread, where the rest runs.

Bugs:
Moving enemies to adjacent blocks works as follows:

We check the adjacent squares of a random enemy for occupancy.
We move the enemy to one of the free ones randomly

this involves a while loop. That continues to get a random location for the object to move towards until it is unoccupied.

We initially ran into an issue, where upon reaching the while loop. Objects that had no free adjacent squares would get stuck in our while loops inifinitely. So. We added a very large and ugly if statement before the while loop.

Essentially, if there are no free adjacent blocks. The movement operation should in theory leave the enemy where it is.

However, there seems to be a flaw. Probably in our if statement. Where upon sometimes, the occupancy of all adjacent blocks is not caught.

We have tried to fix it, but have not been able to yet. We will probably have it fixed by demo day on may 2. Please note, the bug manifests as a hang while in game. Level one will produce this the least.

Scoring:
Since out game is based on a strict time constraint rather than an enemy count. The score is displayed as remaining time on the "cleared" screen.

Game mechanics:
You pick a difficulty, and then have a limited amount of time to clear the dots. You may clear a dot if the color is within a range of the displayed colors at the bottom. Your time is up top.

